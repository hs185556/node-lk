#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('lk:server');
let http = require('http');

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



//1.引入包connection
let socketPackage = require('socket.io');
//2.生成实例
let io = socketPackage(server);
//3.建立连接
io.on('connection',(socket)=>{//这里到底是用connect还是用connection??? 
	console.log('连接客户端成功');
	//3.1服务器给客户端广播消息  或者说返回消息
	socket.emit('msg','欢迎来找小撩聊天');
	//3.2 服务器端接受客户端消息
	socket.on('msg',(data)=>{
//		console.log(data);
		let msg = backMsg(data);
		socket.emit('msg',msg);
	});
//	3.3监听链接关闭
	socket.on('disconnect',()=>{
		console.log('客户端连接断开');
	})
});

//4. 根据用户输入，回复消息
let backMsg = (data)=>{
	let msg = null;
	switch(data){
		case '小撩':
			msg = '我在呢';
			break;
		case '明天天气':
			msg = '泉州市明天天气不太好，最低温度为22°，有暴风雨';
			break;
		case '你好':
			msg = '你好';
			
			break;
		case '你真聪明':
			msg = '哪里 哪里';
			break;
		case '视频下载':
			msg = '关注微信公众号旋之华，有更多视频下载';
			break;
		case '性别':
			msg = '我不知道呢';
			break;
		case '我爱你':
			msg = '我看过那么多云，你是最灵动的那一朵';
			break;
		case '我旁边的那个同学是猪吗':
			msg = '可能是吧，不然怎么整天吃零食';
			break;
		default:
			msg = '小撩正在努力升级中.....';
			break;
	}
	return msg;
}
